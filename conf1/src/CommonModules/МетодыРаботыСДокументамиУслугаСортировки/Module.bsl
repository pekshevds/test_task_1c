#Область ПрограммныйИнтерфейс

// Создает и сохраняет документы Услуга сортировки
//
// Параметры:
//  ЧастьДанныхФайла  - Массив строк - строки для загрузки в базу данных 
//
Процедура СоздатьДокументыУслугаСортировки(ЧастьДанныхФайла)Экспорт 
	КоличествоПопыток = 5;
	
	Пока ЧастьДанныхФайла.Количество() > 0 Цикл 
		
		ТекущаяСтрока = ЧастьДанныхФайла[0];
		
		ДанныеДляСозданиеДокумента = МетодыРаботыСЗагружаемымФайломИЕгоСодержимым.ПолучитьДанныеДляСозданиеДокумента(
			ТекущаяСтрока);	
		
		Счетчик = 1;
		Пока Не СоздатьДокументУслугаСортировки(ДанныеДляСозданиеДокумента) Цикл 
			
			Если Счетчик = КоличествоПопыток Тогда 
				
				Прервать;
			КонецЕсли;
			Счетчик = Счетчик + 1;			
		КонецЦикла;
		
		ЧастьДанныхФайла.Удалить(0);
	КонецЦикла;	
КонецПроцедуры // СоздатьДокументыУслугаСортировки()

// Дергает из базы N документов
//
// Параметры:
//  АдресФайлаВоВременномХранилище  - Строка - адрес нахождения файла
//                 								во временном хранилище
// Возвращаемое значение:
//   Массив[ДокументСсылка.УслугаСортировки]  - Массив из N документов
//   
Функция ПолучитьNДокументов(N = 1000)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ %1
	|	УслугаСортировки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УслугаСортировки КАК УслугаСортировки";
	
	Запрос.Текст = СтрШаблон(Запрос.Текст, Формат(N, "ЧДЦ=0; ЧГ=0"));
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // ПолучитьNДокументов()

// Рассчитывает и заполняет реквизиты СтоимостьХранения и СтоимостьСортировки
//
// Параметры:
//  УслугаСортировки  - ДокументСсылка.УслугаСортировки - документ который нужно рассчитать
//  Тарифы  - Соответствие - тарифы на услуги
//  
// Возвращаемое значение:
//   Булево  - Истина - если документ рассчитан и сохранен в базе данных, иначе - Ложь
//
Функция РассчитатьДокументУслугаСортировки(Знач УслугаСортировки, Тарифы)Экспорт
	
	УслугаСортировки = УслугаСортировки.ПолучитьОбъект();
	СведенияПоДнямХраненияГруза = Документы.УслугаСортировки.ПолучитьСведенияПоДнямХраненияГруза(УслугаСортировки.Ссылка);
	
	
	ТарифХранения = Тарифы[Перечисления.КодыТиповОбработки.Хранение];
	УслугаСортировки.СтоимостьХранения = (СведенияПоДнямХраненияГруза.КоличествоРабочихДней * ТарифХранения) + 
		(СведенияПоДнямХраненияГруза.КоличествоВыходныхДней * ТарифХранения * 2);
		
	УслугаСортировки.СтоимостьСортировки = Тарифы[УслугаСортировки.КодТипаОбработки];	
		
	Попытка
		УслугаСортировки.Записать();
	Исключение   
		
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции // РассчитатьДокументУслугаСортировки()

// Разбивает выборку документов на части
//
// Параметры:
//  ВыборкаДокументоВЗамесяц  - ВыборкаИзРезультатаЗапроса - выборка документов
//  РазмерКорзины  - Число - количество элементов в одной части
//  
// Возвращаемое значение:
//   Массив[Массив[ДокументСсылка.УслугаСортировки]]  - части выборки документов
//
Функция РазбитьВыборкуДокументовНаЧасти(ВыборкаДокументоВЗамесяц, РазмерКорзины = 10000)Экспорт
	
	СписокКорзин = Новый Массив;
	СчетчикСтрокКорзины = 0;
		
	СчетчикСтрок = 1;Корзина = Новый Массив;
	Пока ВыборкаДокументоВЗамесяц.Следующий() Цикл 
		
		Если СчетчикСтрокКорзины = РазмерКорзины Тогда 
						
			СписокКорзин.Добавить(Корзина);
			Корзина = Новый Массив;
			СчетчикСтрокКорзины = 0;
		КонецЕсли;
		
		Корзина.Добавить(ВыборкаДокументоВЗамесяц.Ссылка);
		
		СчетчикСтрок = СчетчикСтрок + 1;
		СчетчикСтрокКорзины = СчетчикСтрокКорзины + 1;
	КонецЦикла;
	
	Если Корзина.Количество() > 0 Тогда 
		
		СписокКорзин.Добавить(Корзина);
	КонецЕсли;	
	
	Возврат СписокКорзин;
КонецФункции // РазбитьВыборкуДокументовНаЧасти()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Создает и сохраняет документ Услуга сортировки
//
// Параметры:
//  ДанныеДляСозданиеДокумента  - Структура - значения для заполнения реквизитов нового документа
//
// Возвращаемое значение:
//   Булево  - Истина - если документа успешно сохранен в базе данных
//   иначе - Ложь
//
Функция СоздатьДокументУслугаСортировки(ДанныеДляСозданиеДокумента)
	
	НоваяУслугаСортировки = Документы.УслугаСортировки.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(НоваяУслугаСортировки, ДанныеДляСозданиеДокумента);
	
	Попытка
		НоваяУслугаСортировки.Записать();
	Исключение   
		
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции // СоздатьДокументУслугаСортировки()
#КонецОбласти
